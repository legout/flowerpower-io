{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Advanced Features\n",
        "\n",
        "`flowerpower-io` offers several advanced features and integration capabilities to handle complex data workflows, optimize performance, and connect with external systems.\n",
        "\n",
        "## Performance Optimization\n",
        "\n",
        "`flowerpower-io` leverages efficient Python libraries like Polars and PyArrow for data processing, ensuring high performance, especially with large datasets.\n",
        "\n",
        "*   **Lazy Loading/Processing**: For formats like Parquet, `flowerpower-io` can utilize lazy evaluation where supported, deferring computation until necessary, which can significantly reduce memory usage and improve performance.\n",
        "*   **Batch Processing**: When dealing with very large files, consider processing data in batches to manage memory effectively.\n",
        "\n",
        "## SQL Integration\n",
        "\n",
        "`flowerpower-io` provides robust integration with SQL databases, allowing you to not only load and save data but also execute custom SQL queries directly."
      ],
      "id": "f8efdd3c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "from flowerpower_io.loader import SQLiteReader\n",
        "from flowerpower_io.saver import SQLiteWriter\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Setup a dummy SQLite database\n",
        "db_path = \"temp_advanced.db\"\n",
        "conn_str = f\"sqlite:///{db_path}\"\n",
        "df_data = pd.DataFrame({\n",
        "    'id': [1, 2, 3, 4, 5],\n",
        "    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n",
        "    'age': [25, 30, 35, 40, 45],\n",
        "    'city': ['New York', 'London', 'New York', 'Paris', 'London']\n",
        "})\n",
        "\n",
        "# Write data to SQLite\n",
        "saver = SQLiteWriter(path=conn_str, table_name=\"users\")\n",
        "saver.save(df_data)\n",
        "print(f\"Data written to {db_path} in table 'users'.\")\n",
        "\n",
        "# Read all data\n",
        "reader = SQLiteReader(path=conn_str, table_name=\"users\")\n",
        "df_all = reader.load()\n",
        "print(\"\\nAll data from 'users' table:\")\n",
        "print(df_all)\n",
        "\n",
        "# Execute a custom SQL query\n",
        "query = \"SELECT name, age FROM users WHERE city = 'New York'\"\n",
        "df_filtered = reader.load(query=query)\n",
        "print(\"\\nUsers from New York:\")\n",
        "print(df_filtered)\n",
        "\n",
        "# Clean up\n",
        "os.remove(db_path)\n",
        "print(f\"\\nCleaned up {db_path}\")"
      ],
      "id": "c621bb8e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## DuckDB and DataFusion Integration\n",
        "\n",
        "`flowerpower-io` supports DuckDB and DataFusion, enabling powerful in-process analytical processing directly on your data files. This allows for SQL-like querying of various file formats without needing to load them entirely into memory.\n",
        "\n",
        "### DuckDB Example"
      ],
      "id": "c046a79b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "from flowerpower_io.loader import DuckDBLoader\n",
        "from flowerpower_io.saver import DuckDBSaver\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Create a dummy CSV file for demonstration\n",
        "csv_file = \"temp_data.csv\"\n",
        "pd.DataFrame({'a': [1, 2, 3], 'b': ['x', 'y', 'z']}).to_csv(csv_file, index=False)\n",
        "print(f\"Created dummy CSV: {csv_file}\")\n",
        "\n",
        "# Load data using DuckDBLoader and perform a SQL query\n",
        "# DuckDBLoader can query directly on files\n",
        "loader = DuckDBLoader(path=csv_file, table_name=\"temp_csv_table\")\n",
        "# You can query the CSV file directly as a table\n",
        "df_result = loader.load(query=f\"SELECT a, b FROM '{csv_file}' WHERE a > 1\")\n",
        "print(\"\\nResult from DuckDB query on CSV:\")\n",
        "print(df_result)\n",
        "\n",
        "# Save data to DuckDB\n",
        "duckdb_path = \"temp_duckdb.db\"\n",
        "saver = DuckDBSaver(path=duckdb_path, table_name=\"my_table\")\n",
        "saver.save(df_result)\n",
        "print(f\"\\nData saved to DuckDB at {duckdb_path} in table 'my_table'.\")\n",
        "\n",
        "# Clean up\n",
        "os.remove(csv_file)\n",
        "if os.path.exists(duckdb_path):\n",
        "    os.remove(duckdb_path)\n",
        "print(f\"Cleaned up {csv_file} and {duckdb_path}\")"
      ],
      "id": "138a54f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.callout-note}\n",
        "## DataFusion\n",
        "DataFusion integration is primarily handled internally by the library for specific file formats (like Parquet). While there isn't a direct `DataFusionLoader` or `DataFusionSaver` class, the library leverages DataFusion's capabilities for efficient data manipulation when reading certain file types, especially when predicates are pushed down to the source.\n",
        ":::\n",
        "\n",
        "## Integration with External Systems\n",
        "\n",
        "`flowerpower-io` can be extended to integrate with various external systems.\n",
        "\n",
        "### Message Queues (e.g., MQTT)\n",
        "\n",
        "The library includes `MQTTLoader` and `MQTTSaver` for real-time data streaming."
      ],
      "id": "9ad47d50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "from flowerpower_io.loader import MQTTLoader\n",
        "from flowerpower_io.saver import MQTTSaver\n",
        "import polars as pl\n",
        "import time\n",
        "\n",
        "# This example requires an MQTT broker running.\n",
        "# For demonstration, we'll simulate the process without a live broker connection.\n",
        "\n",
        "# Simulate receiving data\n",
        "def simulate_mqtt_publish(topic, messages):\n",
        "    print(f\"\\nSimulating MQTT publish to topic: {topic}\")\n",
        "    for i, msg in enumerate(messages):\n",
        "        print(f\"Publishing: {msg}\")\n",
        "        # In a real scenario, this would be mqtt_client.publish(topic, msg)\n",
        "        time.sleep(0.1) # Simulate network delay\n",
        "\n",
        "# Simulate MQTT loader\n",
        "class MockMQTTLoader(MQTTLoader):\n",
        "    def __init__(self, *args, **kwargs):\n",
        "        super().__init__(*args, **kwargs)\n",
        "        self._received_data = []\n",
        "\n",
        "    def load(self, timeout=1):\n",
        "        print(f\"Simulating MQTT load from topic: {self.topic}\")\n",
        "        # In a real scenario, this would connect and subscribe\n",
        "        # For demo, just return simulated data\n",
        "        if not self._received_data:\n",
        "            print(\"No simulated data to load.\")\n",
        "            return pl.DataFrame()\n",
        "        df = pl.DataFrame(self._received_data)\n",
        "        self._received_data = [] # Clear after loading\n",
        "        return df\n",
        "\n",
        "    def _on_message(self, client, userdata, msg):\n",
        "        # This method would parse the message payload\n",
        "        payload = msg.payload.decode('utf-8')\n",
        "        print(f\"Simulated MQTT message received: {payload}\")\n",
        "        self._received_data.append({\"message\": payload, \"timestamp\": time.time()})\n",
        "\n",
        "# Simulate MQTT saver\n",
        "class MockMQTTSaver(MQTTSaver):\n",
        "    def save(self, data_frame):\n",
        "        print(f\"\\nSimulating MQTT save to topic: {self.topic}\")\n",
        "        for row in data_frame.iter_rows(named=True):\n",
        "            print(f\"Simulating publish: {row}\")\n",
        "            # In a real scenario, this would be mqtt_client.publish(self.topic, json.dumps(row))\n",
        "\n",
        "# Example usage with mock classes\n",
        "topic = \"flowerpower/data\"\n",
        "mock_messages = [{\"value\": i} for i in range(3)]\n",
        "df_to_publish = pl.DataFrame(mock_messages)\n",
        "\n",
        "# Use MockMQTTSaver\n",
        "saver = MockMQTTSaver(topic=topic)\n",
        "saver.save(df_to_publish)\n",
        "\n",
        "# Use MockMQTTLoader (assuming some data was published to it)\n",
        "# For this demo, we'll manually add some data to its internal buffer\n",
        "loader = MockMQTTLoader(topic=topic)\n",
        "loader._received_data = [{\"value\": 10}, {\"value\": 20}] # Manually add data for demo\n",
        "df_loaded = loader.load()\n",
        "print(\"\\nSimulated loaded data:\")\n",
        "print(df_loaded)"
      ],
      "id": "9c443bd1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.callout-note}\n",
        "## Other External Systems\n",
        "`flowerpower-io` can be integrated with other external systems like cloud storage (S3, GCS, Azure Blob Storage) or data warehouses (Snowflake, BigQuery) by leveraging underlying libraries (e.g., PyArrow for S3/GCS, specific database connectors). While direct `flowerpower-io` classes for these might not be explicitly listed, the modular design allows for custom implementations or direct use of the underlying libraries where `flowerpower-io` acts as an orchestrator.\n",
        ":::"
      ],
      "id": "b098dad2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/z0043ddz/coding/libs/flowerpower-io/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}